clinics.clinic_id.appointments:
  get:
    tags:
      - "Appointments"
    summary: "List all the appointments at a clinic"
    description: |
      **Permission:** `Open`
      - List all available appointments

      **Permission:** `Community Worker`
      - List all appointments (including booked)

      ***

      This enpoint returns several responses depending on the caller:

      ### Accessed From Service User
      When this endpoint is accessed from a service user (no authentication), it will always return only the
      appointments that are available.

      ### Accessed From User
      When access by an authenticated user, they can specify if they want to view all appointments or only available
      appointments by specifying the `format` parameter in the query string.

      ### Calendar Feed
      To get a calendar feed of all appointments in `.ics` format:
      - the `format` parameter of the query string must be set to `ics`
      - and the `calendar_feed_token` must be provided (which is unique to a specific user)
    operationId: "clinics.appointments.index"
    security: []
    parameters:
      allOf:
        - $ref: /docs/requests/appointment/index.yaml
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/AppointmentCollection"
          text/calendar:
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
  post:
    tags:
      - "Appointments"
    summary: "Create a new appointment"
    description: |
      **Permission:** `Community Worker`
      - Create an appointment at a clinic that they are a `Community Worker` for
    operationId: "clinics.appointments.store"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/clinic_id"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: /docs/requests/appointment/store.yaml
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/Appointment"
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"

users.user_id.appointments:
  get:
    tags:
      - "Appointments"
    summary: "List all appointments for a specified user"
    description: |
      **Permission:** `Community Worker`
    operationId: "users.appointments.list"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/user_id"
      - name: "format"
        in: "query"
        description: "The format of the appointments"
        schema:
          type: "string"
          enum: ["json", "ics"]
          default: "json"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/AppointmentCollection"
          text/calendar:
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"

service-users.service_user_uuid.appointments:
  get:
    tags:
      - "Appointments"
    summary: "List all appointments for a specified service user"
    description: |
      **Permission:** `Community Worker`
    operationId: "service-users.appointments.list"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/service_user_uuid"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/AppointmentCollection"
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"

appointments:
  get:
    tags:
      - "Appointments"
    summary: "List all appointments"
    description: |
      **Permission:** `Community Worker`
    operationId: "appointments.list"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/AppointmentCollection"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"

appointments.appointment_id:
  get:
    tags:
      - "Appointments"
    summary: "Get a specific appointment"
    description: |
      **Permission:** `Community Worker`
    operationId: "appointments.show"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/appointment_id"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/Appointment"
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"
  put:
    tags:
      - "Appointments"
    summary: "Update a specific appointment"
    description: |
      **Permission:** `Community Worker`
      - Update their own appointment
    operationId: "appointments.update"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: /docs/requests/appointment/update.yaml
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/Appointment"
          text/calendar:
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
  delete:
    tags:
      - "Appointments"
    summary: "Delete a specific appointment"
    description: |
      **Permission:** `Community Worker`
      - Can delete any appointment from any user at a clinic they are a `Community Worker` for

      ***

      An appointment can only be deleted if it has not been booked by a service user. If an appointment has been booked,
      it must first be cancelled before you can delete it.
    operationId: "appointments.destroy"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/appointment_id"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/responses.yaml#/DeletedResponse"
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"

appointments.appointment_id.cancel:
  put:
    tags:
      - "Appointments"
    summary: "Cancel a specific appointment"
    description: |
      **Permission:** `Open`
      - Service user can cancel their own appointments

      **Permission:** `Community Worker`
      - Can cancel any appointment from any user at a clinic they are a `Community Worker` for

      ***

      Removes the booking against the specified appointment.

      If the service user is cancelling their own appointment then the `service_user_token` parameter must be provided.
    operationId: "appointments.cancel.update"
    security: []
    parameters:
      - $ref: "/docs/parameters/id.yaml#/appointment_id"
    requestBody:
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "service_user_token"
            properties:
              service_user_token:
                description: "A short lived token obtained by a service user"
                type: "string"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/appointment.yaml#/Appointment"
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"

appointments.appointment_id.schedule:
  delete:
    tags:
      - "Appointments"
    summary: "Delete a specific repeating appointment"
    description: |
      **Permission:** `Community Worker`
      - Can delete any appointment schedule for any user at a clinic they are a `Community Worker` for

      ***

      Deleting the appointment schedule will attempt to delete all future appointments from the appointment specified.
      If any of the future appointments have been booked, they will be skipped and not deleted. If you want them to be
      deleted, you must manually cancel them and delete them individually after.
    operationId: "appointments.schedule.destroy"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/appointment_id"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/responses.yaml#/DeletedResponse"
      404:
        $ref: "/docs/schemas/responses.yaml#/NotFoundResponse"
      401:
        $ref: "/docs/schemas/responses.yaml#/UnauthenticatedResponse"
      419:
        $ref: "/docs/schemas/responses.yaml#/AuthenticationTimeoutResponse"
