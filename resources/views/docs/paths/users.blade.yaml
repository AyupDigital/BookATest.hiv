users:
  post:
    tags:
      - "Users"
    summary: "Create a new user"
    description: |
      **Permission:** `Organisation Admin`

      ***

      Create a new users along with their roles.
    operationId: "users.store"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "/docs/schemas/user.yaml#/ModifyUser"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/user.yaml#/User"
  get:
    tags:
      - "Users"
    summary: "List all users"
    description: |
      **Permission:** `Community Worker`
    operationId: "users.list"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/user.yaml#/UserCollection"

users.user_id:
  get:
    tags:
      - "Users"
    summary: "Get a specific user"
    description: |
      **Permission:** `Open`
    operationId: "users.show"
    security: []
    parameters:
      - $ref: "/docs/parameters/id.yaml#/user_id"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/user.yaml#/User"
  put:
    tags:
      - "Users"
    summary: "Update a specific user"
    description: |
      **Permission:** `Community Worker`
      - Edit their own profile

      **Permission:** `Clinic Admin`
      - Edit their own profile
      - Assign `Community Worker` role to other users at a clinic they are a `Clinic Admin` at
      - Remove `Community Worker` from other users at a clinic they are a `Clinic Admin` at

      **Permission:** `Organisation Admin`
      - Edit all user profiles
      - Assign any role to any user
      - Remove any role from any user

      ***

      Update a specific users along with their roles.
    operationId: "users.update"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/user_id"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "/docs/schemas/user.yaml#/ModifyUser"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/user.yaml#/User"
  delete:
    tags:
      - "Users"
    summary: "Disable a specific user"
    description: |
      **Permission:** `Organisation Admin`

      ***

      This will only disable the user so they can no longer access the backend. All of this user's future appointments
      will also be cancelled and deleted.
    operationId: "users.destroy"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/user_id"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/responses.yaml#/DeletedResponse"

users.user_id.profile-picture:
  post:
    tags:
      - "Users"
    summary: "Uploads a user's profile picture"
    description: |
      **Permission:** `Community Worker`
      - Upload their own profile picture
    operationId: "users.profile-picture.store"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/user_id"
    requestBody:
      required: true
      content:
        image/png:
          schema:
            type: "string"
            format: "binary"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                message:
                  type: "string"
                  example: "Profile picture successfully uploaded"
  get:
    tags:
      - "Users"
    summary: "Get a specific user's profile picture"
    description: |
      **Permission:** `Open`

      ***

      If no profile picture has been uploaded for the user, then a generated profile picture will be used, consisting
      of their initials against a random coloured background.
    operationId: "users.profile-picture.show"
    security: []
    parameters:
      - $ref: "/docs/parameters/id.yaml#/user_id"
    responses:
      200:
        description: "Successful response"
        content:
          image/png:
  delete:
    tags:
      - "Users"
    summary: "Deleted a specific user's profile picture"
    description: |
      **Permission:** `Community Worker`
      - Delete their own profile picture

      **Permission:** `Organisation Admin`
      - Delete any user's profile picture
    operationId: "users.profile-picture.destroy"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/user_id"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/responses.yaml#/DeletedResponse"

clinics.clinic_id.users:
  get:
    tags:
      - "Users"
    summary: "List all users that are associated to a specific clinic"
    description: |
      **Permission:** `Community Worker`

      ***

      Lists all users who have a role of some sort at the specified clinic.
    operationId: "clinics.users.show"
    parameters:
      - $ref: "/docs/parameters/id.yaml#/clinic_id"
    responses:
      200:
        description: "Successful response"
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/user.yaml#/UserCollection"
