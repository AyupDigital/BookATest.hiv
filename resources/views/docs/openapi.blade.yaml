openapi: "3.0.1"

info:
  title: "{{ config('app.name') }} API Specification"
  description: "For using the {{ config('app.name') }} API"
  version: "v1"
  contact:
    name: "Ayup Digital"
    url: "https://ayup.agency"

servers:
- url: "{{ config('app.url') }}/v1/"
  description: "Dev Server"

paths:
  /users:
    post:
      tags:
        - "Users"
      summary: "Create a new user"
      operationId: "users.store"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/User.yaml#/ModifyUser"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/chemas/User.yaml#/User"
    get:
      tags:
        - "Users"
      summary: "List all users"
      operationId: "users.list"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/User.yaml#/UserCollection"
  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get a specific user"
      operationId: "users.show"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/User.yaml#/User"
    put:
      tags:
        - "Users"
      summary: "Update a specific user"
      operationId: "users.update"
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/User.yaml#/ModifyUser"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/User.yaml#/User"
    delete:
      tags:
        - "Users"
      summary: "Disable a specific user"
      operationId: "users.destroy"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Responses.yaml#/DeletedResponse"

  /service-users:
    post:
      tags:
        - "Service Users"
      summary: "Create a new service user"
      operationId: "service-users.store"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/ServiceUser.yaml#/ModifyServiceUser"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/ServiceUser.yaml#/ServiceUser"
    get:
      tags:
        - "Service Users"
      summary: "List all service users"
      operationId: "service-users.list"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/ServiceUser.yaml#/ServiceUserCollection"
  /service-users/{uuid}:
    get:
      tags:
        - "Service Users"
      summary: "Get a specific service user"
      operationId: "users.show"
      parameters:
        - $ref: "#/components/parameters/uuid"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/ServiceUser.yaml#/ServiceUser"

  /clinics:
    post:
      tags:
        - "Clinics"
      summary: "Create a new clinic"
      operationId: "clinics.store"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/Clinic.yaml#/ModifyClinic"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Clinic.yaml#/Clinic"
    get:
      tags:
        - "Clinics"
      summary: "List all clinics"
      operationId: "clinics.list"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Clinic.yaml#/ClinicCollection"
  /clinics/{id}:
    get:
      tags:
        - "Clinics"
      summary: "Get a specific clinic"
      operationId: "clinics.show"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Clinic.yaml#/Clinic"
    put:
      tags:
        - "Clinics"
      summary: "Update a specific clinic"
      operationId: "clinics.update"
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/Clinic.yaml#/ModifyClinic"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Clinic.yaml#/Clinic"
    delete:
      tags:
        - "Clinics"
      summary: "Delete a specific clinic"
      operationId: "clinics.destroy"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Responses.yaml#/DeletedResponse"

  /clinics/{id}/users:
    get:
      tags:
        - "Users"
      summary: "List all users that are associated to a specific clinic"
      operationId: "clinics.users.show"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/User.yaml#/UserCollection"

  /clinics/{id}/appointments:
    post:
      tags:
        - "Appointments"
      summary: "Create a new appointment"
      operationId: "clinics.appointments.store"
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/Appointment.yaml#/ModifyAppointment"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/Appointment"
    get:
      tags:
        - "Appointments"
      summary: "List all appointments at a specified clinic"
      operationId: "clinics.appointments.list"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/AppointmentCollection"

  /users/{id}/appointments:
    get:
      tags:
        - "Appointments"
      summary: "List all appointments for a specified user"
      operationId: "users.appointments.list"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/AppointmentCollection"

  /service-users/{id}/appointments:
    get:
      tags:
        - "Appointments"
      summary: "List all appointments for a specified service user"
      operationId: "service-users.appointments.list"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/AppointmentCollection"

  /appointments:
    get:
      tags:
        - "Appointments"
      summary: "List all appointments"
      operationId: "appointments.list"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/AppointmentCollection"

  /appointments/{id}:
    get:
      tags:
        - "Appointments"
      summary: "Get a specific appointment"
      operationId: "appointments.show"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/Appointment"
    put:
      tags:
        - "Appointments"
      summary: "Update a specific appointment"
      operationId: "appointments.update"
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/Appointment.yaml#/ModifyAppointment"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/Appointment"
    delete:
      tags:
        - "Appointments"
      summary: "Delete a specific appointment"
      operationId: "appointments.destroy"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Responses.yaml#/DeletedResponse"

  /appointments/{id}/cancel:
    put:
      tags:
        - "Appointments"
      summary: "Cancel a specific appointment"
      operationId: "appointments.cancel.update"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Appointment.yaml#/Appointment"

  /questions:
    post:
      tags:
        - "Questions"
      summary: "Create a new set of eligibility questions"
      operationId: "questions.store"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "/docs/schemas/Question.yaml#/ModifyQuestion"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "/docs/schemas/Question.yaml#/Question"
    get:
      tags:
        - "Questions"
      summary: "List all questions"
      operationId: "questions.list"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Question.yaml#/QuestionCollection"

  /appointments/{id}/answers:
    post:
      tags:
        - "Answers"
      summary: "Create a new answer"
      description: "This endpoint will only be invoked by an end-user who's API key will link back to them."
      operationId: "answers.store"
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/Answer.yaml#/ModifyAnswer"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Answer.yaml#/Answer"
    get:
      tags:
        - "Answers"
      summary: "List all answers"
      operationId: "answers.list"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Answer.yaml#/AnswerCollection"
  /answers/{id}:
    get:
      tags:
        - "Answers"
      summary: "Get a specific answer"
      operationId: "answers.show"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Answer.yaml#/Answer"
    put:
      tags:
        - "Answers"
      summary: "Update a specific answer"
      description: "This endpoint will only be invoked by an end-user who's API key will link back to them."
      operationId: "answers.update"
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "/docs/schemas/Answer.yaml#/ModifyAnswer"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Answer.yaml#/Answer"
    delete:
      tags:
        - "Answers"
      summary: "Delete a specific answer"
      operationId: "answers.destroy"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "/docs/schemas/Responses.yaml#/DeletedResponse"

components:
  securitySchemes:
    app_id:
      type: "apiKey"
      description: "API key to authorize requests"
      name: "appid"
      in: "query"

  parameters:
    id:
      name: "id"
      in: "path"
      description: "The ID of the model"
      schema:
        type: "integer"

    uuid:
      name: "uuid"
      in: "path"
      description: "The UUID of the model"
      schema:
        type: "string"
security:
  - app_id: []

tags:
  - name: "Users"
    description: "Backend users"
  - name: "Service Users"
    description: "End-users consuming the service"
  - name: "Clinics"
    description: "Clinic locations"
  - name: "Appointments"
    description: "Appointments at clinics"
  - name: "Questions"
    description: "Screening questions to get an appointment booked"
  - name: "Answers"
    description: "Service user answers to screening questions"

externalDocs:
  description: "External Doc Website"
  url: "https://ayup.agency"
